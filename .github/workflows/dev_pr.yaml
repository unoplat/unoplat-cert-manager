name: Develop Branch Action

on:
  pull_request_target:
    types: [opened]
    branches:
      - develop
  workflow_dispatch:    

jobs:
  dev-pr:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout our repository
      uses: actions/checkout@v2
      with:
        ref: ${{ github.head_ref }}

    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: v3.11.1
    
    - name: Login to Github Container Registry
      uses: docker/login-action@v2
      with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

    - name: Install yq
      run: |
        sudo snap install yq
        
    - name: Extract versions
      run: |
        cd charts/cert-manager
        cert_manager_repository=$(yq e '.image.repository' values.yaml)
        cert_manager_tag=$(yq e '.appVersion' Chart.yaml)
        echo "CERT_MANAGER_IMAGE=$cert_manager_repository:$cert_manager_tag" >> $GITHUB_ENV

        cert_manager_webhook_repository=$(yq e '.webhook.image.repository' values.yaml)
        cert_manager_webhook_tag=$(yq e '.appVersion' Chart.yaml)
        echo "CERT_MANAGER_WEBHOOK_IMAGE=$cert_manager_webhook_repository:$cert_manager_webhook_tag" >> $GITHUB_ENV

        cert_manager_cainjector_repository=$(yq e '.controller.image.repository' values.yaml)
        cert_manager_cainjector_tag=$(yq e '.appVersion' Chart.yaml)
        echo "CERT_MANAGER_CAINJECTOR_IMAGE=$cert_manager_cainjector:$cert_manager_cainjector_tag" >> $GITHUB_ENV

        cert_manager_acmesolver_repository=$(yq e '.acmesolver.image.repository' values.yaml)
        cert_manager_acmesolver_tag=$(yq e '.appVersion' Chart.yaml)
        echo "CERT_MANAGER_ACME_SOLVER_IMAGE=$cert_manager_acmesolver_repository:$cert_manager_acmesolver_tag" >> $GITHUB_ENV

        startupapicheck_repository=$(yq e '.startupapicheck.image.repository' values.yaml)
        startupapicheck_tag=$(yq e '.appVersion' Chart.yaml)
        echo "STARTUP_API_CHECK_IMAGE=$startupapicheck_repository:$startupapicheck_tag" >> $GITHUB_ENV

    - name: Login to Github Container Registry
      uses: docker/login-action@v2
      with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

    - name: Fetch cert manager images with specified tag
      run: |
        docker pull ${{ env.CERT_MANAGER_IMAGE }}
        docker pull ${{ env.CERT_MANAGER_WEBHOOK_IMAGE }}
        docker pull ${{ env.CERT_MANAGER_CAINJECTOR_IMAGE }}
        docker pull ${{ env.CERT_MANAGER_ACME_SOLVER_IMAGE }}
        docker pull ${{ env.STARTUP_API_CHECK_IMAGE }}
            
    - name: Run Trivy vulnerability scanner for cert_manager
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.CERT_MANAGER_IMAGE }}
        format: 'sarif'
        output: 'cert_manager.sarif'

    - name: Upload Trivy scan results for cert_manager
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'cert_manager.sarif'
        category: "Container scan for cert_manager"


    - name: Run Trivy vulnerability scanner for cert_manager_webhook
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.CERT_MANAGER_WEBHOOK_IMAGE }}
        format: 'sarif'
        output: 'cert_manager_webhook.sarif'

    - name: Upload Trivy scan results for cert_manager_webhook
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'cert_manager_webhook.sarif'
        category: "Container scan for cert_manager_webhook"
    
    
    - name: Run Trivy vulnerability scanner for cert_manager_cainjector
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.CERT_MANAGER_CAINJECTOR_IMAGE }}
        format: 'sarif'
        output: 'cert_manager_cainjector.sarif'

    - name: Upload Trivy scan results for cert_manager_cainjector
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'cert_manager_cainjector.sarif'
        category: "Container scan for cert_manager_cainjector"

    
    - name: Run Trivy vulnerability scanner for cert_manager_acmesolver
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.CERT_MANAGER_ACME_SOLVER_IMAGE }}
        format: 'sarif'
        output: 'cert_manager_acmesolver.sarif'

    - name: Upload Trivy scan results for cert_manager_acmesolver
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'cert_manager_acmesolver.sarif'
        category: "Container scan for cert_manager_acmesolver"

    - name: Run Trivy vulnerability scanner for startup_api_check
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.STARTUP_API_CHECK_IMAGE }}
        format: 'sarif'
        output: 'startup_api_check.sarif'

    - name: Upload Trivy scan results for startup_api_check
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'startup_api_check.sarif'
        category: "Container scan for startup_api_check"

    - uses: kubescape/github-action@main
      continue-on-error: true
      with:
        format: sarif
        outputFile: helm_results
        files: "charts/cert-manager"         

    - name: Upload Kubescape scan results to Github Code Scanning
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: helm_results.sarif  
        category: "Kubescape scan for Helm Charts"

    - name: Moving scan results to appropriate folders
      run: |
        TIMESTAMP=$(date -u +%Y%m%d%H%M%S)
        echo "Moving helm_results.sarif to reports/kubernetes-nsa-cisa-yaml-scan-analysis/helm_results_${TIMESTAMP}.sarif"
        mv -f "helm_results.sarif" "reports/kubernetes-nsa-cisa-yaml-scan-analysis/helm_results_${TIMESTAMP}.sarif"


    - name: Push changes to our repository
      run: |
        git config --global user.name "GitHub Action"
        git config --global user.email "action@github.com"
        git pull origin
        git add charts/*
        git add reports/*
        git commit -m "added charts and scan results"
        echo ${{ github.head_ref }}
        git push origin ${{ github.head_ref }}
      
